package com.Vcard.EmployeeService.ServiceImpl;


import java.time.LocalDate;
import java.time.Period;
import java.util.Date;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.Vcard.EmployeeService.DTO.BankDetailsDto;
import com.Vcard.EmployeeService.DTO.CardCategoryDto;
import com.Vcard.EmployeeService.DTO.CardDto;
import com.Vcard.EmployeeService.DTO.EmployeeDto;
import com.Vcard.EmployeeService.DTO.TransactionDto;
import com.Vcard.EmployeeService.Entity.BankDetails;

import com.Vcard.EmployeeService.Enum.CardStatus;
import com.Vcard.EmployeeService.Entity.EmployeeEntity;
import com.Vcard.EmployeeService.Enum.Limitpoints;

import com.Vcard.EmployeeService.Enum.Status;
import com.Vcard.EmployeeService.Enum.TransactionType;
import com.Vcard.EmployeeService.Exception.CustomIllegalArguementException;
import com.Vcard.EmployeeService.Exception.CustomRunTimeException;
import com.Vcard.EmployeeService.Feign.CardServiceFeignClient;
import com.Vcard.EmployeeService.Repository.BankDetailsRepository;

import com.Vcard.EmployeeService.Repository.EmployeeRepository;

import jakarta.transaction.Transactional;


@Service
public class EmployeeService {
	
	@Autowired
	private EmployeeRepository employeeRepo;
	
	@Autowired
	private BankDetailsRepository bankDetailsRepo;
	
	@Autowired
	private CardServiceFeignClient cardServiceClient;
	
	
	@Autowired
	private ModelMapper modelMapper;
	
	
	public BankDetailsDto findBankByEmployee_AssociateId(Integer associateId) {
		Optional<BankDetailsDto> bank =  bankDetailsRepo.findByEmployee_AssociateId(associateId);
		BankDetailsDto bankd = bank.get();
		System.out.println(bankd);
		return bankd;
		
	}
	
	
	
	public EmployeeDto findByAssociateId(Integer associateId) {
		EmployeeEntity empEntity = employeeRepo.findByAssociateId(associateId);
	    if (empEntity == null) {
	        throw new CustomRunTimeException("Employee not found for associateId: " + associateId);
	    }
	    return modelMapper.map(empEntity, EmployeeDto.class);
	}
	
	@Transactional
	public CardDto createCard(EmployeeDto employee) {
		if (employee == null) {
	        throw new CustomRunTimeException("No Application for this employee");
	    }
	    System.out.println("Received EmployeeDto: " + employee);
	    return cardServiceClient.createCard(employee); // Rethrow or handle accordingly
		    }
	

	
	
	public void setPinNumber(CardDto cardDto) {
		
		cardServiceClient.setPinNumber(cardDto);
		
	}
	
	
	
	public BankDetailsDto setVpa(BankDetailsDto bankdetails) {
		EmployeeDto empOptional = employeeRepo.findByAssociateId(bankdetails.getAssociateId());
		
	    if (empOptional == null) {
	        throw new CustomRunTimeException("Employee not found for associateId: " + bankdetails.getAssociateId());
	    }
	    
	    Optional<EmployeeEntity> emp = employeeRepo.findById(empOptional.getAssociateId());
	    EmployeeEntity empl = emp.get();
	    BankDetails bank = new BankDetails();
	    
	   
	    bank.setVpaId(empl.getMobile());
	    bank.setEmployee(empl);
	    
	
	    return modelMapper.map(bankDetailsRepo.save(bank), BankDetailsDto.class);
	}
	
	
	

	
	public void convert(TransactionDto transactDto) {
		cardServiceClient.convert(transactDto);
	}
	
	
	
	
	
	public void Buy(TransactionDto transactDto) {
		cardServiceClient.Buy(transactDto);
	}
	
	

	
	
	

}
